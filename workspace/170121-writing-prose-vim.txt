

Starting from July 2016, I use Vim to edit my past writings.
there are two choices of wrapping text, both having its difficulties.

for convenience, I #say <that a physical line is a line delimited by newline characters>,
and <that an apparent line is a line displayed as in the current window>.
and I say <that a text file is softly- wrapped if physical lines are &allowed to be longer than current window width,
and <that a text file is hard- wrapped if newlines are inserted, so <that a physical line is just an apparent line>>.

when editing human- readable text, rather than computer code, which will you use, soft or hard wrap?

<using soft wrap>

supporters of soft wrap think the source should be easy to read, {which the original Markdown $aims}.
hard wrap isn’t something that laypeople spontaneously do,
and therefore it makes no semantic sense.

now, the irritation is <that, the remaining space in the current window is not enough for the next physical line.
if so, the next line isn’t shown,
and the remaining space is wasted.
a partial workaround is to toggle between displaying part of the next line as much as possible:

++noremap <silent> <leader>\ :call ToggleDisplayLastLine()<cr>++ '

and we define@@ ++ToggleDisplayLastLine()++ @@as thus:

++function! ToggleDisplayLastLine()++ '
_ ++if (&display=='')++ '
_ _ ++let &display='truncate'++ '
_ ++else++ '
_ _ ++let &display=''++ '
_ ++endif++ '
++endfunction++ '

still, it is awkward to scroll either for a half frame (++<ctrl>u++ @@and@@ ++<ctrl>d++ @@)@@ @@or a whole frame@@ @@(@@ ++<ctrl>f++ @@and@@ ++<ctrl>b++ @@).@@

As for half- frame scrolling, in fact, half of the window does not correspond to many lines, because every physical line now consists of too many apparent lines.
Furthermore, a "half frame" now is often much less than half of a window, with some rows wasted in the manner pointed above.

As for whole-frame scrolling, Vim reserves 2 lines, and repeats them both in the previous and the present frame.
Now, "scrolling a whole frame" does not really shows the "next frame", but the next frame with substantial shift, since a paragraph is long.

In both case, it is difficult to visualize the new position after scrolling.

Before long I have made it a habit to always scroll for whole frame, and have mapped:

   nnoremap <c-f> <c-f><c-e><c-e>M
   nnoremap <c-b> <c-b><c-y><c-y>M

This is easier to visualize, since the previous and the next frame does not overlap, just like pages in a book.

<line Numbers>

finally, the line numbering can be problematic too.
line numbers are crucial in navigating in Vim, but it is really twice of the paragraph number,
and such information isn’t helpful.
ironically, in Microsoft Word, apparent line numbers may be shown.

<using hard wrap>

Many Vim users suggest hard wrap as a solution.
That is, every physical line is hard broken to be just an apparent line.

supporters might hold that it is not the source code that matters, but the output.
Indeed, the prose written in plain text is sort of source code that has to be interpreted in order to be published, though we don't normally think this way.

indeed, if in a piece of prose the majority of paragraphs are too long to be properly worked with when shown in Vim, these paragraphs are probably too long.

A paragraph as long as half of the capacity of the present window is probably too long.
That is at most 610.5 characters or so.
I will probably write paragraph as long as this very seldom (unless I wish to write a parody of *In Search of Lost Time*, or achieve the consciousness stream in the very last chapter of *Ulysses*).

in Vim, newlines may be inserted automatically with (say):

++set textwidth=74++

see ++formatoptions++ in help for its settings.
the default is@@ ++tcq++ @@,@@ @@meaning automatic wrapping, wrapping code comments, and allowing formatting of comments.

unfortunately, when I rearrange material, the physical lines become uneven.
this makes it hard to estimate the number of words in the present paragraph.

<automatic reformatting>

to make ends of visual lines even, there is a automatically reformatting command `gqap`,
but it only applies to the current paragraph.
while the user may define a shortcut, reformatting when typing can be a distraction.
more problematically, this doesn't work for Chinese characters,
or I don’t know <how to do that with Vimscript>.

furthermore, <what if I want to copy and paste my strongly broken prose into somewhere else, like WordPress or Facebook>?

Luke Maciak @@recommends@@ \\http://www.terminally-incoherent.com/blog/2013/06/17/using-vim-for-writing-prose/\\ @@:@@ ++:%norm vipJ++ @@,@@
but the result is not reliable.
indented code blocks sometimes get merged with preceding and following paragraphs, even delimited with a blank line,
and shorter paragraphs are swallowed.

<newline sensitivity>

apart from the habit of wrapping in the source, there $seems to be some controversy on whether newlines are rendered by Markdown compilers.
that is to say, some Markdown compilers render every single newline,
and some render only two or more newlines.
I call them respectively newline- sensitive and newline- insensitive.
(LaTeX compilers are always newline- insensitive)

to summarize the situation, there are 4 cases:
Text hard wrapped, compiler newline- insensitive;
Text hard wrapped, compiler newline- sensitive.
Text soft wrapped, compiler newline- insensitive.
Text soft wrapped, compiler newline- sensitive.
only Case 2 produces incorrect results.

Actually, [Gruber's original specification](https://daringfireball.net/projects/markdown/syntax) does not resolve parsing issue unambiguously, and GitHub, Pandoc, WordPress, and so on, all give their own implementation.
Such disorder motivates [CommonMark](http://commonmark.org), the effort to standardize Markdown.

For one thing, Grober hints weak rendition in his spec (same link as above):

>The implication of the “one or more consecutive lines of text” rule is that Markdown supports “hard-wrapped” text paragraphs.
This differs significantly from most other text-to-HTML formatters \[...\] which translate every line break character in a paragraph into a `<br />` tag.

And it is true that
   @@GitHub@@ \\https://github.github.com/gfm/\\ @@,@@
   @@Pandoc@@ \\http://rmarkdown.rstudio.com/authoring_pandoc_markdown.html\\ @@,@@
   @@Stack Overflow@@ \\http://stackoverflow.com/editing-help) @@,@@
   @@and@@ @@CommonMark Spec@@ \\http://spec.commonmark.org/0.27/#hard-line-breaks\\
   @@are all newline- insensitive.@@

unfortunately, WordPress and the earlier GitHub newline- insensitive,
For the former, see WordPress's [Markdown quick reference](https://en.support.wordpress.com/markdown-quick-reference/).
there is a
   @@debate@@ \\http://meta.stackexchange.com/questions/26011/should-the-markdown-renderer-treat-a-single-line-break-as-br\\
   on Meta Stack Exchange about {which way is better},
   but it seems insensitivity is the consensus.



in present Wikipedia
   @@guideline@@ \\https://en.wikipedia.org/wiki/Wikipedia:Don%27t_use_line_breaks\\ there are proponents on both sides;
the Wikipedia markup interpreter, though different from Markdown, is also newline- insensitive

<using halfway wrap>

a compromise is to break at every end of sentence;
I call this a halfway wrapping.
this way, every physical line is a meaningful entity,
and it $makes sense to go up, go down, cut, or paste an entire line.
again, newlines can be removed by ++J++.
even though halfway wrapping also makes ends of apparent lines uneven, it is better than soft wrapping.

After a long contemplation on the matter, I think halfway wrap really is the way to go.
I will always halfway- wrap TeX and Markdown sources.

The case for Markdown is different from that of LaTeX.
Even though both render EOL weakly, I always see compiled pdf on the facing side, using for example TeXstudio, but view only Markdown source when working on it.
Thus I want Markdown sources to visually resemble the output, but that is not necessary as I work on LaTeX sources.

however, to me the best scenario is <that Markdown be universally newline- insensitive>, and <that Vim show apparent line numbers, rather than physical line numbers, and <that the user always soft- wrap>.
though understandably Vim is a line editor, I hope <a future version will include this feature>.
to cater both code-writers and prose-writers, there can even be a setting that toggles line number style between them.


That said, it is still unsatisfying that scrolling is not smooth, but a new frame must start with a displayed line of a paragraph (physical line) too.
In Microsoft Word or TextEdit for example, this need not be the case, but the first displayed line of in new frame may be any displayed line in any paragraph.

%%January 21, 2017%%
