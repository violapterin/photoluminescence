=== ##terminology## ===

Git, created by Linus Torvalds in 2005, is a software for tracking changes in different versions of a project consisting of plain text.
to me, Git commands are hard to remember, partly because it use text to describe the interaction of multiple components of the project.
anyway, I try my best to give succinct and correct descriptions.

a working tree is the directory {where your project is}.
a local repository (local repo) is a subdirectory in the working tree named@@ ++.git/++ @@;
everything Git needs is saved in it.
a remote repository (remote repo) stores corresponding content in a hosting service, like GitHub.

when you commit, you create a commit object including information on the working tree, along with a hash generated according to the author, time stamp, and file contents.
commits are linked to each other, making up a commit history.
a stash is a commit object not yet committed.

when you clone a repo, you you create a copy of it.
when you fork a repo, you clone it and modify it, thus generating two diverging histories.
when you fork you own local repo, you create a branch.
when you pull, you download files from the remote repo to the local repo.
when you push, you upload files from the local repo to the remote repo.

=== ##creating a repo## ===

we #use the convention <that a@@ ++$++ @@indicates a command prompt>.
to create a local repo,@@ ++cd++ @@into the top directory of your project, and use:

   $ git init

remember that nothing affects the remote repo unless you push.
therefore, if you have screwed up something and want to restart from the beginning, you may consider deleting the whole@@ ++.git/++ @@and using@@ ++git init++ @@again.

to create a new remote repo, sign up a Git service provider if you haven't.
the most popular choices are@@ @@GitHub@@ \\https://github.com\\ @@and@@ @@Bitbucket@@ \\https://bitbucket.org\\ @@.@@
(it is my convention to name local repo with underscore- separated words, and remote repo with according hhyphen- separated words.)

GitHub offers two protocals: `https` and `ssh`.
More on this on a later section.
For now, enter the page for the repo, and click the green button "Clone or download".
If the small title reads "Clone with HTTPS", there is a url that looks like

    https://github.com/aminopterin/photoluminescence.git

Click "Use SSH", and you will see something like

   git@github.com:violapterin/photoluminescence.git

To set remote url, go back to your terminal emulator.
First you have to create an abbreviation of the remote url called `origin`.
If you decide to use SSH, use

   $ git remote add origin git@github.com:violapterin/photoluminescence.git

after having created `origin`, if you have to change url later, use `set-url`.

   $ git remote set-url origin git@github.com:violapterin/photoluminescence.git

to list currently existent remote repos, use:

   $ git remote -v

the result will look like:

   origin  git@github.com:violapterin/computer-notes.git (fetch)
   origin  git@github.com:violapterin/computer-notes.git (push)

to see more information in order to trouble-shoot, you may

   $ git remote show origin

=== ##ignoring certain files## ===

it isn’t Git’s original purpose to track binary files.
binary files cannot be compared effectively,
nor can it be merged or rebased normally.

generally, to tell Git to ignore specified files, create a file named ++.gitignore++ in the top directory.
as an illustration,

.DS_Store
*.pdf
/__pycache__/

here, ++*++ @@is a wildcard.
so `.DS_Store` in the top directory, all `.pdf` files anywhere, and everything in the subdirectory `/__pycache__/` of the top directory, will be ignored.

after ++.gitignore++ is modified, those files tracked before but intended to be ignored, will nevertheless be tracked.
to stop tracking them genuinely, remove all the cache by

$ git rm -r --cached .

then add to the index and commit, as usual.

=== ##configuring Git## ===

in general, to configure something in Git, run

$ git config --global class.attribute value

alternatively, append the following line, in ++~/.gitconfig++ (the second line should start with a tab),

[class]
   attribute = value

as an example, the default editor for commit message is Vi.
to change it to Vim, use

   $ git config --global core.editor "vim"

or to color Git’s terminal output,

   $ git config --global color.ui auto

all the various `color.*` (where `*` is a wildcard) configurations available with git commands, will then be set.
The `auto` makes sure Git try only those colors the current terminals emulator supports.
When a command is used for the first time, relevant color configuration is set.

as another example, by default non- ASCII characters such as Chinese characters are backslash- escaped with character codes.
@@like@@ @@我@@ @@becomes@@ ++\346\210\221++ @@.@@
to show them as verbatim,

$ git config --global core.quotepath false

## Generating SSH key and automatic login

HTTPS and SSH differ in several aspects.
On one hand, in the presence of a firewall, the HTTPS port is almost always open, while the SSH port is not, being often blocked by network firewalls.
On the other hand, an SSH Key is more secure in that, under SSH protocol, the user does not actually login, but under HTTPS he or she has to login.

Under SSH protocol, authentication of SSH Key is easily managed by an `ssh-agent`, while under HTTPS, the user may also use a credential helper, which I have not tried.

To generate an SSH key for RSA cryptosystem, having 4096 bits, with your email specified,

   $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

You will be asked for the filename with path (by default, `~/.ssh/id_rsa`), and a passphrase.
Since with an SSH-agent you have only to type the passphrase once, you may well choose a reasonably long (say, some 6-word) phrase.
Special characters are not only allowed, but in fact encouraged.

If you have several keys, you may rename the public key (the one with extension `.pub`) and private key (the one without), but they must share the same name except for extension.
Let us rename it `rsa_github.pub` with `mv ~/.ssh/id_rsa ~/.ssh/rsa_github.pub`.

Browse your GitHub account, and go to "Personal settings", and then "SSH and GPG keys".
Click "New SSH key".
Copy and paste the whole content of your public key, or more simply,

    $ cat ~/.ssh/rsa_github.pub | pbcopy

and paste it into the box.

To let Keychain remember the key, in `~/.ssh/config` append `UseKeychain yes` after the relevant lines (omitted lines shown as `...`)

    Host github.com
       User git
       ...
       UseKeychain yes

Hopefully, you will never be asked for passphrase.

~~~

===
@@❧@@ %%January 25, 2017%% '
===
