=== ##classifying Git actions## ===

===
@@here is a slowly growing summary of Git commands I find helpful, addressed the dear reader.@@ _
@@again, I appreciate anyone to correct my misunderstandings, if any.@@ '

@@Git is a gigantic beast,@@
@@and I #try to group various actions by their point of departure and arrival.@@ _
@@indeed, Git actions #occur between the working tree, the local, and remote repo.@@ _
@@commands@@ ++add++ @@,@@ ++commit++ @@,@@ @@and@@ ++push++ @@,@@ @@among others, transfer data from the local end to the remote end.@@ _
@@commands@@ ++clone++ @@,@@ ++fetch++ @@,@@ ++pull++ @@,@@ @@and@@ ++reset++ @@,@@ @@among others, transfer data from the remote end to the local end.@@ '

@@by convention, commands meant to be run in a Bash shell is &prefixed with a@@ ++$++ @@,@@
@@and terms enclosed in@@ ++<>++ @@aren’t verbatim.@@ _
@@remember <that Git commands #accept the working directory to be either the top directory ({which we #assume}) or any of its subdirectory, except@@ ++.git/++ @@,@@ @@the local repo itself>.@@ '
===

===
@@for more information, Git man pages can be called by:@@ '

++$ git help <command>++ '

@@or equivalently:@@ '

++$ git <command> --help++ '
===

=== ##from the tree to the local: add## ===

===
@@action of adding $stages changes in the working tree to the stash.@@ _
@@to add everything— new, modified, and deleted files:@@ '

++$ git add .++ '
===

===
@@to see a summary of staged changes:@@ '

++$ git status++ '
===

===
@@to show changes in the working tree not added:@@ '

++$ git diff++ '

@@to compare the indexed files with the latest commit:@@ '

++$ git diff --staged++ '

@@instead, to compare a specific file in the working tree with the committed version of it:@@ '

++$ git diff <commit> <certain_file>++ '

@@there will be a new page {that $summarizes the modification}.@@ _
@@navigation commands are identical to@@ ++less++ @@,@@ @@and similar to Vim.@@ _
@@hit@@ ++j++ @@or@@ ++e++ @@to forward one line,@@
@@and@@ ++k++ @@or@@ ++y++ @@to backward one line.@@ _
@@hit@@ ++f++ @@to forward one window,@@
@@and@@ ++b++ @@to backward one window.@@ _
@@hit@@ ++d++ @@to forward one-half window,@@
@@and@@ ++u++ @@to backward one-half window.@@ _
@@finally, hit@@ ++q++ @@to quit.@@ '
===

=== ##from the tree to the local: commit## ===

===
@@to commit your present files from the stash to the local repo, with a commit message:@@ '

++$ git commit -m "<commit message>"++ '

@@a commit message should summarize the new work concisely, within 70 characters.@@ _
@@if you can’t, you should probably split your work into more than one commits.@@ _
@@to save space, it is conventional to use verbs in its base form, without period in the end.@@ '

@@you may modify your commit message even after you #commit, with:@@ '

++$ git commit --amend++ '

@@an editor should open, showing the commit message and the status.@@ _
@@this file is &saved as@@ ++.git/COMMIT_EDITMSG++ @@.@@ _
@@I #find it useful to edit the commit message this way, because I #don’t have to backslash- escape special characters.@@ _
@@you may also add more explanatory lines below, separated from the commit message with a blank line.@@ '

@@but what if you #want to cancel the last 3 commits, in order to make a new commit from the present tree?@@ _
@@you can revert the head, and commit as usual.@@ '

++$ git reset HEAD~3++ '
===

===
@@sometimes we #add a tag to single out more significant commits, especially when a commit is &released to the public.@@ _
@@a tag can be added when you have &modified the working tree.@@ _
@@to add a tag to the latest commit:@@ '

++$ git tag -a <tag_number>++ '

@@to simply list all tags:@@ '

++$ git tag++ '

@@to push tags to the remote, you #have to do:@@ '

++$ git push --tags origin++ '
===

===
@@the commit log $lists commit hashes, authors, time stamps, and commit messages.@@ _
@@to view the commit log:@@ '

++$ git log++ '

@@to make the log concise and informative:@@ '

++$ git log --all --decorate --oneline --graph++ '

@@pointer@@ ++HEAD++ @@refers to the current commit.@@ _
@@to retrieve its ancestors, two operators could be used.@@ _
@@pointer@@ ++HEAD~2++ @@refers to the eldest parent of the parent of the head.@@ _
@@pointer@@ ++HEAD^3++ @@means its third- to- last eldest parent of the head, and so on.@@ _
@@the two operators may be composed, for instance as@@ ++HEAD^3~2++ @@.@@ '
===

=== ##from the local to the remote: push## ===

===
@@to push all consistent commits from the local repo to the remote repo:@@ '

++$ git push origin <branch>++ '

@@if flag@@ ++-u++ @@or@@ ++--set-upstream++ @@is &added,@@ @@you #set up a tracking reference so <that you can type only@@ ++git push++ @@or@@ ++git pull++ @@and so on>.@@ '

@@if you #have inconsistent commits, causing Git $refuses to push,@@
@@you #add the flag@@ ++-f++ @@or@@ ++--force++ @@.@@ _
@@this $forces every local commit to overwrite its remote counterpart,@@
@@and it may cause the remote repo to lose data.@@ _
@@think twice before using it!@@ '
===

=== ##from the remote to the local: clone, fetch, pull, reset## ===

===
@@to clone everything from the remote repo into a new subdirectory of the current working directory (where the repo for the blog is &taken for instance):@@ '

++$ git clone <remote_url>++ '
===

===
@@fetching $creates a local copy of a remote branch only, not affecting the working tree nor the head.@@ _
@@to fetch everything from a remote branch:@@ '

++$ git fetch origin <branch>++ '
===

===
@@meanwhile, pulling not only $fetches a remote branch as said, but also $merges all conflicts into the corresponding local branch.@@ _
@@to pull from origin to a branch:@@ '

++$ git pull origin <branch>++ '

@@it is more straightforward, I #think, to fetch and merge explicitly, than just to pull.@@ '
===

===
@@if there are local changes, {which you are %willing to discard,} we may reset the local branch to a remote branch:@@ '

++$ git reset --hard origin/<branch>++ '
===

=== ##from the local to the tree: reset, revert## ===

===
@@by resetting, you may completely restore the working tree to a previous state, by:@@ '

++$ git reset HEAD~2++ '

@@flag@@ ++--soft++ @@rewrites changes not committed, leaving staged changes.@@ _
@@flag@@ ++--mixed++ @@rewrites changes not committed or not staged, leaving changes in the working tree.@@ _
@@flag@@ ++--hard++ @@rewrites changes not committed or not staged, and the working tree.@@ '
===

===
@@meanwhile, by reverting, you may restore the working tree to a previous commit, but creating a new commit without rewriting the history:@@ '

++$ git revert <commit_pointer>++ '
===

===
@@sometimes you #want to rewrite the history, to combine several commits as one.@@ _
@@to combine the last 5 commits as one:@@ '

++$ git reset --soft HEAD~5++ '

@@afterwards, commit.@@ '
===

~~~

===
@@❧@@ %%February 6, 2017;%%
%%revised July 30, 2021%% '
===

=== ##references## ===

===
@@❉@@ @@Git,@@
   @@Documentation@@ \\https://git-scm.com/documentation\\ '

@@❉@@ @@S Puisungnoen,@@
   @@Git— the simple guide@@ \\http://up1.github.io/git-guide/index.html\\ '

@@❉@@ @@R E Silverman, «Git Pocket Guide».@@ _
   @@O’Reilly Media, 2013.@@ '

@@❉@@ @@NDP Software,@@
   @@Git cheatsheet@@ \\http://www.ndpsoftware.com/git-cheatsheet.html\\ '
===

