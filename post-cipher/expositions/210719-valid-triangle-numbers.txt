
===
@@you are &given a set@@ ^^&t^^ @@of sides, with size@@ ^^.N^^ @@.@@ _
@@return the number of such triplets
chosen from@@ ^^&t^^ @@{that can make up triangles, if we #take them
as lengths of the side}.@@ '

@@constraints:@@ '

^^.1
   <0 .N
   <0 .1.0.0.0.;^^ '
^^.0
   <0 [: &t: .[.n.]]
   <0 .1.0.0.0.,
   `for` .n .= .1 ., /6 ., .N.;^^ '
===

===
@@we #want to find@@ ^^.f .[&t.]^^ @@,@@ @@the number of valid triples of triangle number.@@ _
@@to slightly abuse notation, we may consider@@ ^^&t^^ @@ordered in any fixed manner.@@ _
@@the brute- force approach would be exhausting all triplets in@@ ^^&t^^ @@,@@ @@with complexity@@
   ^^@O .[[.3: .N:].]^^ @@.@@ '

@@how can we do better?@@ _
@@let@@ ^^&t^^ @@be sorted, {which #takes@@ ^^@O .[.N 'log' .N.]^^ @@}.@@ _
@@without loss of generality, let the triplet be@@ ^^.<.x., .y., .z.>^^ @@with@@ ^^.x <0 .y <0 .z^^ @@.@@ _
@@we only #have to check:@@ '
^^.x .+ .y >1 .z.;^^ '

@@split cases of whether the biggest component@@ ^^.z <6 &t^^ @@ is chosen.@@ _
@@call@@ ^^&s =1 &t /2 .{.z.}^^ @@.@@ _
@@if@@ ^^.g .[.z., &s.]^^ @@is the number of valid triples, {in which@@ ^^.z^^ @@must be chosen}, then:@@ '

^^.f .[&t.] .= .g .[.z., &s.] .+ .f .[&s.].;^^ '

@@we #see <that@@ ^^.g .[.z., &s.]^^ @@$has complexity@@ ^^@O .[.N.]^^ @@>.@@ _
@@indeed, fix@@ ^^.z^^ @@,@@ @@for any@@ ^^.x^^ @@,@@ @@we #have@@ ^^.y >1 .z .- .x^^ @@.@@ _
@@here@@ ^^.r .[.z .- .x.]^^ @@,@@ @@the number of such@@ ^^.y^^ @@,@@ @@may be found with a table, filled before the recursion.@@ _
@@hence,@@ ^^.g .[.z., &s.]^^ @@may be so defined:@@ '

^^.g .[.z., &s.] .= [: %0: .x!! <6 &t] .r .[.z .- .x!!.].;^^ '

@@the complexity of calling@@ ^^.g^^ @@is@@ ^^@O .[.N.]^^ @@,@@
@@and the complexity of exhausting@@ ^^.x^^ @@is also@@ ^^@O .[.N.]^^ @@.@@ _
@@the complexity of recursively calling@@ ^^.g^^ @@is@@ ^^@O .[[.2: .N:].]^^ @@,@@ @@{which $overwhelms the complexity of sorting}.@@ _
@@the overall complexity is therefore@@ ^^@O .[[.2: .N:].]^^ @@.@@ '
===

///
++# 611. Valid Triangle Number [medium]++ '
++#! /usr/bin/env python3++ '
++import typing as TYPE++ '
'
++def main():++ '
_ ++choice = [2, 2, 3, 4]++ '
_ ++solution = Solution()++ '
_ ++count = solution.count_triangle_number(choice)++ '
_ ++print("There are", count, "valid triplets.")++ '
_ ++# "3"++ '
_ ++# # [2,3,4], [2,3,4], [2,2,3]++ '
'
++class Solution:++ '
'
_ ++def count_triangle_number(self, choice: TYPE.List[int]) -> int:++ '
_ _ ++choice = [value for value in choice if value != 0]++ '
_ _ ++if not choice: return 0++ '
_ _ ++choice.sort()++ '
_ _ ++record = dict()++ '
_ _ ++for head in range(max(choice) * 2 + 1):++ '
_ _ _ ++record[head] = sum([1 for value in choice if value <= head])++ '
_ _ ++record[-1] = 0++ '
_ _ ++distinct = list(set(choice))++ '
_ _ ++distinct.sort()++ '
_ _ ++number = self.count_various(record, distinct)++ '
_ _ ++return number++ '
'
_ ++def count_various(self, record: TYPE.Dict[int, int], distinct: TYPE.List[int]) -> int:++ '
_ _ ++if not distinct: return 0++ '
_ _ ++small = distinct[0]++ '
_ _ ++partial = distinct[1:]++ '
_ _ ++number_fixed = self.count_fixed(record, small, partial)++ '
_ _ ++number_partial = self.count_various(record, partial)++ '
_ _ ++number = number_fixed + number_partial++ '
_ _ ++return int(number)++ '
'
_ ++def count_fixed(self, record: TYPE.Dict[int, int], small: int, distinct: TYPE.List[int]) -> int:++ '
_ _ ++number = 0++ '
_ _ ++novel_small = record[small] - record[small - 1]++ '
_ _ ++number += self.pick_three(novel_small)++ '
_ _ ++if not distinct: return number++ '
_ _ ++number += (record[small * 2 - 1] - record[small]) * self.pick_two(novel_small)++ '
_ _ ++for value in distinct:++ '
_ _ _ ++bound = value + small - 1++ '
_ _ _ ++novel_medium = record[value] - record[value - 1]++ '
_ _ _ ++if (novel_medium == 0): continue++ '
_ _ _ ++total_above = record[bound] - record[value]++ '
_ _ _ ++add_distinct = total_above * novel_medium++ '
_ _ _ ++add_pair_medium = self.pick_two(novel_medium)++ '
_ _ _ ++number += novel_small * (add_distinct + add_pair_medium)++ '
_ _ ++return int(number)++ '
'
_ ++def pick_two(self, number: int) -> int:++ '
_ _ ++if (number < 2): return 0++ '
_ _ ++return number * (number - 1) / 2++ '
'
_ ++def pick_three(self, number: int) -> int:++ '
_ _ ++if (number < 3): return 0++ '
_ _ ++return number * (number - 1) * (number - 2) / 6++ '
'
++# # # # # # # # # # # # # # # #++ '
'
++main()++ '
///

~~~

===
@@❧@@ %%July 19, 2021%%
===

