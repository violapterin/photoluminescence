===
@@Phoenix $wants to buy all products with respective price@@ ^^.p <6 &p^^ @@,@@ @@and respective discount thresholds@@ ^^[:.s: .n]^^ @@so <that when the sum exceeds@@ ^^[:.s: .n]^^ @@,@@ @@he $gets discount@@ ^^[:.d: .n]^^ @@>,@@ ^^.n .= .1 ., /6 ., .N^^ @@.@@ _
@@he $considers to buy one optional item with price@@ ^^.q <6 &q^^ @@.@@ _
@@he $has also a limit of budget@@ ^^.B^^ @@.@@ _
@@how $does he make the best choice?@@ '
===

===
@@Yuchun @asked me the question,@@
@@and the confusion is <how we #elucidate our everyday instinct>.@@ _
@@if Phoenix simply $minimizes the total cost@@ ^^.T^^ @@,@@ @@he most likely wouldn’t buy any optional item.@@ _
@@perhaps he should introduce a penalty function@@ ^^$f^^ @@,@@ @@{which $trades the total eligible discount with@@ ^^.q^^ @@}.@@ _
@@for instance, he may set@@ ^^$f =1 $R .q^^ @@,@@ @@and minimize@@ ^^.T .+ $R .q^^ @@.@@ '

@@alternatively, Phoenix may minimize the price not discounted,@@
@@and when there is a tie, he $minimizes the total price.@@ _
@@certainly, this isn’t perfect either, because it may be absurd to see it a better bargain to buy many option items to get more discount.@@ _
@@(but people #do that all the time.)@@ _
@@in other words, we #have the equations:@@ '

^^[:&p: .0]., [:&p: .1]., /6., [:&p: .N] `all` `is` `mutually` `exclusive` `and` `collectively` `exhaustive` `of` &p.;^^ '
^^.q <6 &q^^ '
^^[: .P: .n] =1 [: %0: .p <6 [: &p: .n]] .p., `for` .n .= .1., /6 .,.N^^ '
^^.T .= [.N: %0: .n .= .1] [: .P: .n] .- [:%0: .d <6 &d] .d .+ .q^^ '
^^[:.s: .n] <0 [:.P: .n]., `for` [:.d: .n] <6 &d^^ '
^^[:&p: .0]., [:&p: .1]., /6., [:&p: .N]., .q .= 'argmin' [:.P: .0]^^ '
^^.q .= 'argmin' .T^^ '

@@taking this view, we #implement a brute force approach below.@@ '
===

///
++#! /usr/bin/env python3++ '
++import copy++ '
'
++def compare_discount(**data):++ '
_ ++budget = data["budget"]++ '
_ ++many_discount = data["many_discount"]++ '
_ ++many_option = data["many_option"]++ '
_ ++many_core = data["many_core"]++ '
_ ++many_price = many_core + many_option++ '
_ ++separation = len(many_discount) + 1++ '
_ ++partition = divide_optional(separation, len(many_core), len(many_option))++ '
_ ++if not partition:++ '
_ _ ++print("Error: no combination found")++ '
_ _ ++quit()++ '
_ ++print("number of partition:", len(partition))++ '
'
_ ++answer = None++ '
_ ++total_held = sum(many_core + many_option)++ '
_ ++original_held = sum(many_core + many_option)++ '
_ ++for method in partition:++ '
_ _ ++total = 0++ '
_ _ ++total += get_total(many_price, method[0])++ '
_ _ ++for head in range(1, separation):++ '
_ _ _ ++threshold = many_discount[head - 1][0]++ '
_ _ _ ++discount = many_discount[head - 1][1]++ '
_ _ _ ++total_part = get_total(many_price, method[head])++ '
_ _ _ ++if not (threshold < total_part): discount = 0++ '
_ _ _ ++total += total_part - discount++ '
_ _ ++if (budget < total): continue++ '
'
_ _ ++original = get_total(many_price, method[0])++ '
_ _ ++if (original_held > original):++ '
_ _ _ ++original_held = original++ '
_ _ _ ++answer = method++ '
_ _ ++elif (original_held == original):++ '
_ _ _ ++if (total_held > total):++ '
_ _ _ _ ++total_held = total++ '
_ _ _ _ ++answer = method++ '
_ ++if not answer:++ '
_ _ ++print("Error: no solution found")++ '
_ _ ++quit()++ '
'
_ ++print("group not discounted:")++ '
_ ++for item in answer[0]:++ '
_ _ ++print(many_price[item], ',', sep = '')++ '
_ ++for head in range(len(many_discount)):++ '
_ _ ++group = answer[head + 1]++ '
_ _ ++if not group: continue++ '
_ _ ++discount = many_discount[head][1]++ '
_ _ ++print("group discounted ", discount, ":", sep = '')++ '
_ _ ++for item in group: print(many_price[item], ", ", sep = '', end = '')++ '
_ _ ++print('')++ '
_ ++print("total price:", total_held)++ '
'
++def divide_optional(separation, number_core, number_option):++ '
_ ++partial = divide_core(separation, number_core)++ '
_ ++if (number_option == 0): return partial++ '
_ ++partition = []++ '
_ ++for option in range(number_option):++ '
_ _ ++for method in partial:++ '
_ _ _ ++for index in range(separation):++ '
_ _ _ _ ++#print(number_core + option)++ '
_ _ _ _ ++hold = copy.deepcopy(method)++ '
_ _ _ _ ++hold[index].add(number_core + option)++ '
_ _ _ _ ++partition.append(hold)++ '
_ ++return partition++ '
'
++def divide_core(separation, number_core):++ '
_ ++if (number_core == 0): return divide_empty(separation)++ '
_ ++partial = divide_core(separation, number_core - 1)++ '
_ ++partition = []++ '
_ ++for method in partial:++ '
_ _ ++for index in range(separation):++ '
_ _ _ ++hold = copy.deepcopy(method)++ '
_ _ _ ++hold[index].add(number_core - 1)++ '
_ _ _ ++partition.append(hold)++ '
_ ++return partition++ '
'
++def divide_empty(separation):++ '
_ ++method = []++ '
_ ++for _ in range(separation): method.append(set({}))++ '
_ ++partition = [method]++ '
_ ++return partition++ '
'
++def get_total(many_price, group):++ '
_ ++amount = 0++ '
_ ++for index in group: amount += many_price[index]++ '
_ ++return amount++ '
'
++# # # # # # # # # # # # # # # #++ '
'
++many_discount = [(1000, 100), (2000, 300), (4000, 800)]++ '
++many_core = (300, 500, 1000, 1200, 1800)++ '
++many_option = (600, 800, 1000)++ '
++budget = 5000++ '
++plan = compare_discount(++ '
_ ++budget = budget,++ '
_ ++many_discount = many_discount,++ '
_ ++many_option = many_option,++ '
_ ++many_core = many_core,++ '
++)++ '
'
++# number of partition: 12288++ '
++# group not discounted:++ '
++# group discounted 100:++ '
++# 300, 1000,++ '
++# group discounted 800:++ '
++# 500, 1200, 1800, 600,++ '
++# total price: 4500++ '
///

~~~

===
@@❧@@ %%July 26, 2021%% '
===

