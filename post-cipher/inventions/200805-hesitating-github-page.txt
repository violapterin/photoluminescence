===
%%August 5, 2020:%% '

@@this was %embarrassing:@@ _
@@I @learned <what I should have &known by day one>: <I could totally disable Jekyll to make it a static site>.@@ _
@@I @knew <that when Jekyll was &run, GitHub automatically generated the site again in the server end>.@@ _
@@but I @didn’t know <that if there was an empty file@@ ++.nojekyll++@@,@@ @@GitHub no longer ran Jekyll, but it simply recognized@@ ++index.html++@@,@@ @@and serve the site accordingly>.@@ _
@@it suddenly @looked feasible to design a custom format, and generate HTML- with- LaTeX myself.@@ '
===

===
%%August 6:%% '

@@surprisingly, as I @tested for several simple cases, most browsers @didn’t support MathML, including even Chrome and Safari.@@ _
@@that crossed out MathML as the framework for my new notation.@@ '

@@if I @used a more linear notation as Peano did, {which fell in the realm of HTML and CSS}, I might solve the problem by not creating it.@@ _
@@OK, brace yourself for a even more unconventional notation.@@ '
@@if so, I only @had to mimic fractions and matrices, possibly by drawing an inner horizontal line between items, and an outermost vertical line surrounding them all.@@ _
@@then I soon @discovered <that@@ ++<p>++ @@ @didn’t allow block- level tags like@@ ++<table>++ @@or@@ ++<div>++ @@>!@@ '
===

===
%%August 7:%% '

@@important realization!@@ _
@@HTML@@ ++<p>++ @@could contain several lines separated by@@ ++<br>++ @@and stacked vertically, if grouped by a@@ ++<span>++@@.@@ _
@@moreover, the CSS@@ ++border-left++@@,@@ ++border-right++@@,@@ ++border-top++@@,@@ @@and@@ ++border-bottom++ @@could serve as traditional mathematical brackets.@@ _
@@they could be &colored, &scaled, or &thickened as I @wished, by a suitable class.@@ _
@@this would perhaps suffice for my revolution of notation.@@ '
===

===
%%August 8:%% '

@@implementing a Markdown parser wouldn’t be an easy task, since to me, Markdown wasn’t an elegant markup.@@ _
@@the earliest version of Markdown by John Gruber was sometimes ambiguous.@@ _
@@for example,@@ ++*italic __bold*__++ @@could be either an italic or a bold, depending on the precedence.@@ _
@@afterwards John MacFarlane @proposed CommonMark, and @implemented a PEG grammar.@@ _
@@to complicate matters, I wasn’t sure whether GitHub- Flavored Markdown @had a PEG (parsing expression grammar) or a BNF (Backus–Naur form).@@ _
@@recall <that it was well &known <that whether a language was unambiguous was undecidable>, in general>.@@ '

@@or it would be more reasonable to first design a subset of the markup, {which was context- free, and should encompass Markdown with Kramdown}.@@ _
@@at this stage I would convert the source to Markdown, and generate via Jekyll.@@ _
@@then when I @had a better grasp of computation theory, I would finish the rest of grammar, {which might be recursively enumerable}.@@ _
@@when that was &done, I would stop using Markdown and Jekyll altogether.@@ _
@@still, I @didn’t know how to show rigorously <that the two parts of the project are theoretically consistent>,@@
@@and I @got confused.@@ '
===

===
%%August 12:%% '

@@ @came up with the artificial square brackets made of HTML spans.@@ _
@@one Stack Overflow post@@ \\https://stackoverflow.com/questions/13878772/how-to-display-classic-built-up-fractions-with-an-horizontal-line-in-css-jav\\
   @@ @explained <that it could indeed be done>.@@ _
@@nevertheless, CSS grids, {which to me was superior to HTML tables}, might be even more suited for this job.@@ _
===

///
++.v, .v-b, .v-l, .v-r, .v-l-r {++ '
_ ++display: inline-block;++ '
_ ++vertical-align: middle;++ '
++}++ '
++.v-b { border-bottom: thin dotted black;}++ '
++.v-l { border-left: thin dotted black;}++ '
++.v-r { border-right: thin dotted black;}++ '
++.v-l-r { border-left: thin dotted black; border-right: thin dotted black;}++ '
'
++<span class="v-l-r">++ '
_ ++<span class="v-b">++ '
_ _ ++<span class="v-r">++ '
_ _ _ ++<span class="v-b"> a </span> <br>++ '
_ _ _ ++<span class="v"> b </span>++ '
_ _ ++</span>++ '
_ _ ++- <span class="v"> cd </span>++ '
_ ++</span> <br>++ '
_ ++<span class="v"> x+y+z </span>++ '
++</span>++ '
///

===
%%August 14:%% '

@@ @realized <that an expression was really a tree>.@@ _
@@if I @chose prefix form always, there would be no parsing problem, as in Lisp.@@ _
@@later today, Facebook friend Dingqi coincidentally @posted a link on prefix- infix- postfix transformation, because I @brought up the topic of obelus sign.@@ _
@@this @helped me further clarify the tree picture@@ _
@@the design of esoteric language Jelly, and its precursor J and APL, might become instructive as a reference of parser implementation.@@ '
===

~~~

===
@@❧@@ %%late August, 2020%%
===

=== ##references## ===

===
@@❉@@ @@S Boldt,@@ @@‹Jelly›@@
   \\https://github.com/SebastianBoldt/Jelly\\ '
@@❉@@ @@J MacFarlane et al,@@ @@CommonMark Spec@@
   \\https://spec.commonmark.org/\\ '
@@❉@@ @@MDN Web Docs,@@ @@‹grid›@@
   \\https://developer.mozilla.org/en-US/docs/Web/CSS/grid\\ '
===