===
%%August 6, 2021:%% '

@@with the library Selenium in Python, it was possible to automatically take screenshots calling a headless Firefox, making it effortless to save double- backup of posts on my site.@@ _
@@it could even take a full- page screenshot, by identifying the@@ ++main++ @@class in my case.@@ '
@@the binary data of the image could be either saved or passed to other function, like the library Pillow.@@ '

@@somehow, I @couldn’t call Chrome;@@
@@there was perhaps some problems with path or version.@@ _
@@besides, to get a screenshot of higher resolution, we @had to zoom in,@@
@@but by far I @didn’t manage to do that either.@@ '

@@in addition, Chinese characters should be shown in Noto Serif,@@
@@but the result was in a sans font,@@
@@and I can’t tell <whether it was Noto Sans or a default font in Windows>.@@ '

@@another problem was <that sometimes Selenium @timed out, or even @failed to locate the ID for the post header, for just certain posts, {which was strange}>.@@ _
@@I therefore @enclosed both the post header and the post content in a div given a class for Selenium to recognize, which greatly improved stability.@@ '
===

///
++#! /usr/bin/env python3++ '
++import os++ '
++import io++ '
++from selenium.webdriver import Firefox++ '
++from PIL import Image++ '
'
++address = "https://www.violapterin.com/"++ '
++os.environ["MOZ_HEADLESS"] = "1"++ '
++driver = Firefox()++ '
++driver.get(address)++ '
++element = driver.find_element_by_tag_name("body")++ '
++binary = element.screenshot_as_png++ '
++driver.quit()++ '
++graph = Image.open(io.BytesIO(binary))++ '
++graph.save("./homepage.png")++ '
///

===
%%August 13:%% '

@@I was a bloody underrated, world- class genius!@@ _
@@I was now able to make a PDF of all blog posts crawled as image.@@ _
@@presently there were about 40 posts,@@
@@and the PDF was already almost 100 page long.@@ '

@@first, as said above, I automatically @saved images of blog posts by Selenium.@@ _
@@the resulting text @appeared blurry,@@
@@but Pillow’s image processing functions, such as@@ ++PIL.ImageEnhance.Contrast++ @@and@@ ++PIL.ImageOps.autocontrast++ @@,@@ @@were helpful.@@ _
@@ImageMagick also @had a variety of operations, such as@@ ++-brightness-contrast++ @@,@@ ++-morphology++ @@,@@ ++-adaptive-sharpen++ @@,@@ ++-sharpen++ @@.@@ _
@@I @preferred ImageMagick, because it could be called by Bash to facilitate automation.@@ '

@@second, I @sliced pictures line by line, saved to dedicated directories named by date.@@ _
@@to let Pillow recognize the cuts, if you @noticed, I even @added yellow borders to displayed lines and green borders to table rows, all slightly broken with CSS margin.@@ '

@@third, I @patched the slices greedily into pages.@@ _
@@once the present total height @exceeded the page height, I @created a new page.@@ _
@@when every post ends, I @inserted a separation line, and @started patching another post.@@ _
@@Pillow would extend each page with suitable margin.@@ '

@@fourth, I @called ImageMagick via Bash, to convert the pages properly numbered in alphabetical order, into a single PDF.@@ '
===

===
%%August 17:%% '

@@now I @wanted to reduce the noise, {which @made the edge of text blurry}.@@ _
@@if the document had &been monochrome, I could have defined a threshold,@@
@@so darker pixels over the threshold were &mapped to pure black, and lighter pixels to white.@@ _
@@however, since it was &colored, such crude process only @gave poor results.@@ '

@@formally, let the document be represented as@@ ^^#P .= .<[:#p :.0]., /6., [:#p :.N .- .1].>^^ @@,@@ @@a list of pixels.@@ _
@@a pixel@@ ^^[:#p :.n] .= .<.x., .y., .z.>^^ @@is a triple of red, green, and blue in the RGB color space.@@ _
@@for simplicity, suppose<@@ ^^[:#p :.n]^^ @@is &transformed so <that@@ ^^.- .1 ./ .2 <0 .x., .y.,.z <0 .1 ./ .2^^ @@>.@@ _
@@it $seems <we have to conduct a regression to find several converging points, {towards which noisy pixels are &quantized}>.@@ _
@@assuming blending with neighboring white pixels $doesn’t change its color but merely its brightness, we could let@@ ^^[:#p :.0]., /6., [:#p :.N .- .1]^^ @@vote for a consensus of brightness.@@ '

@@for example, define these quantities@@ 
   ^^$q .= .x .+ .y .+ .z^^ @@,@@
   ^^$f .= .2 $R .x .- $R .y .- $R .z^^ @@,@@
   ^^$y .= $R .x .+ $R .y .- .2 $R .z^^ @@,@@
@@and it is clear <that@@ ^^.<$q., $f., $y.>^^ @@#form a coordinate>.@@ _
@@on an equipotential surface of@@ ^^.<$f., $y.>^^ @@,@@ @@a regression can be done to find the consensual values of@@ ^^$q^^ @@.@@ _
@@unfortunately, it $strikes me <that@@ ^^$q^^ @@may not have uniform luminosity>;@@
@@the human perception of color isn’t a linear function of@@ ^^.<.x., .y., .z.>^^ @@.@@ '
===

===
%%August 18:%% '

@@if the width of body was more than@@ ++900px++ @@,@@ @@the resolution of the resulting @appeared somewhat acceptable.@@ _
@@the setting would only activate in the presence of a really wide screen like@@ ++2000px++ @@,@@ @@tailored for Selenium,@@
@@so it wasn’t to affect the normal browsing experience.@@ _
@@(otherwise, I would have to use an alternative CSS style, and serve locally to let Selenium take the screenshot, {which would be too much a hassle}.)@@ _
@@I really @wanted to put the matter aside for the moment.@@ '
===

~~~

===
@@❧@@ %%mostly August 13, 2021%% '
===

=== ##references## ===

===
@@❉@@ @@ImageMagick,@@
   @@‹Annotated List of Command-line Options›@@
   \\https://imagemagick.org/script/command-line-options.php\\ '
@@❉@@ @@Pillow,@@
   @@‹ImageEnhance Module›@@
   \\https://pillow.readthedocs.io/en/stable/reference/ImageEnhance.html\\ '
@@❉@@ @@Selenium Python,@@
   @@‹WebDriver API›@@
   \\https://selenium-python.readthedocs.io/api.html\\ '
===
