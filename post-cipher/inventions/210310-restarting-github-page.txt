===
%%March 10, 2021:%% '

@@ @created repo.@@ _
@@the GitHub commit was %going to be helpful in reconstructing the creating process.@@ _
@@to recapitulate, I was %designing a markup, {which &output HTML with Mathjax- readable LaTeX in it}.@@ _
@@it should distinguish normal, italic, and bold text,@@
@@and it should have a math mode too.@@ _
@@the project was &named “Porphyrin”, {which was &derived from the Greek root for ‘purple’.@@ '

@@it @occurred to me, inspired by Markdown, there was an easy parsing strategy as below.@@ _
@@let us say a mark @consisted of an ASCII character repeated several times.@@ _
@@it @marked the beginning and the end of an element.@@ _
@@in so doing, there couldn’t be any ambiguity, as long as the mark didn’t appear in the element’s content.@@ '
===

===
%%April 19:%% '

@@a run of text might consist of the hierarchy of section, paragraph, sentence, and text.@@ _
@@each of them was &represented by an object {which @output HTML element}.@@ _
@@when the parent object was being &parsed, it @parsed its child objects.@@ _
@@in this manner, parsing was &done recursively.@@ '

@@the parent object @passed, to its child object, the child’s source and additional information on the position relative to the parent’s content.@@ _
@@such information, to be used in error messages, @included the line number, the column number, the left fragment of the beginning line, and the right fragment of the ending line.@@ _
@@every object @had to store these fields.@@ '

@@similarly, there should be corresponding classes of stanza, table, and image, regarded as the same level of section.@@ _
@@here, a stanza was &used to display verses and proof.@@ _
@@section, stanza, and table were &set to have symmetrical structure in the hierarchy.@@ _
@@they all @inherited a parent class to enhance code reuse.@@ '
===

=====
%%May 4:%% '

@@there was one method {which @parsed the block level objects (like a section) from the global source}.@@ _
@@another method @parsed the group of inline level objects (like a paragraph), when a separating token was &met.@@ _
@@yet another method @parsed the group of inline level objects (like a sentence).@@ '

@@the text was to be preprocessed before it was &put into a HTML span.@@ _
@@most importantly,@@ ++&++ @@,@@ ++<++ @@,@@ ++>++ @@,@@ ++"++ @@,@@ @@and@@ ++'++ @@had to be escaped in HTML.@@ _
@@additionally, strings could be trimmed of leading and trailing whitespaces.@@ _
@@I could even have several forbidden characters automatically removed, but used in the source as syntactic sugar to guide myself.@@ '

@@for instance, suppose <that@@ ++===++ @@$denotes the beginning and end of a section>,@@
@@and that@@ ++@@++ @@$denotes beginning and end of a text fragment>,@@
@@and that@@ ++'++ @@$denotes a newline>.@@ '
@@then below is a valid piece of Porphyrin source:@@ '

++===++ '
++@@Hello world!@@ '++ '
++@@Who am I?@@++ '
++===++ '

@@this $becomes the HTML:@@ '

++<div>++ '
_ ++<p><span>Hello world!</span></p>++ '
_ ++<p><span>Who am I?</span></p>++ '
++</div>++ '
=====

===
%%May 5:%% '

@@two directories were &input into the main function, one of them containing the source, another containing the HTML.@@ _
@@using Python module@@ ++os++ @@ to compare time stamps, I was able to single out the input files newer than output files, mimicking the effect of a makefile.@@ _
@@this way, when I @updated a source of a post, only the updated post was converted again.@@ '

@@ @wrote some unity tests.@@ _
@@they @started from a single “hello world” to tables, code listings, and mathematics.@@ _
@@when the program @stabilized, newly generated HTML texts would be compared to reference answers.@@ '
===

===
%%May 7:%% '

@@the link was a special construction.@@ _
@@an address, being enclosed by@@ ++\\++ @@,@@ @@ @followed a fragment of text,@@
@@and they were &combined as an anchor when being parsed.@@ '

@@for instance, consider the Porphyrin source:@@ '

++@@English Wikipedia@@ \\https://en.wikipedia.org\\++ '

@@this $becomes the HTML:@@ '

++<a href="https://en.wikipedia.org">English Wikipedia</a>++ '
===

===
%%May 11:%% '

@@that said, it @took more time and caution {than I @thought} to get the parser right.@@ _
@@for example, within a loop, a section @called its method to snip a fragment of source for a paragraph.@@ _
@@should the method immediately call the paragraph constructor?@@ _
@@if so, how did the loop know the next position in the section source to look?@@ _
@@or should the function return the snipped fragment and the mark only,@@
@@so the new position could be calculated?@@ _
@@if so, in the loop the section was &obliged to construct the paragraph according to the enclosing marks,@@
@@and there would be more repetitive code.@@ _
@@in the end, I @returned both the paragraph and next position, getting the advantage of both solutions.@@ '
===

===
%%May 19:%% '
@@ @embarked the task of parsing math.@@ _
@@both letters and signs, let us say, were &encoded by precisely two characters.@@ _
@@the token for letters @began with one of@@ ++.#&@$++ @@,@@ @@and @ended in one of the alphabets@@ ++AaBb ... Zz++ @@,@@
@@and the token for signs @began with one of@@ ++./+-*=~\|^<>%++ @@,@@ @@and @ended in one of the numbers@@ ++01 ... 9++ @@.@@ '

@@I @allowed three kinds of composite objects, namely the term of fraction, the term with superscript and subscript, and the term of vector and matrix.@@ _
@@they were &denoted respectively by the plain brackets@@ ++(.a, .b)++ @@,@@ ++[.a: .b: .c]++ @@,@@ @@and@@ ++{.a; .b; .c; .d}++ @@.@@ _
@@meanwhile,@@ ++.(.)++ @@,@@ ++.[.]++ @@,@@ ++.{.}++ @@,@@ ++.<.>++ @@,@@ @@and@@ ++.\.|++ @@,@@ @@are literal brackets.@@ '

@@for instance, consider the source:@@ '

++(.-.b +0 $R.([.2:.b:] .- .4.a.c.), .2.a)++ '

@@this $becomes the LaTeX code in a span:@@ '

++<span>\(\dfrac {- b \pm \surd \left( {b} ^ {2} _ {} - 4 a c \right)} {2 a}\)</span>++ '
===

===
%%May 26:%% '

@@interpretation of “Porphyrin” @succeeded for the first time!@@ '
===

===
%%May 27:%% '

@@except in enclosing marks, I @made the document ignore whitespace characters anywhere else.@@ _
@@however, this @made it more difficult to find the next position when snipping the very next fragment of source.@@ _
@@after much consideration, I @found <that there just @had to be a function {which @found the very next non- whitespace character}>.@@ '
===

===
%%June 3:%% '

@@ @created repository for the website.@@'
@@it was &named “Photoluminescence”, with the allusion to light, since this word was respectively &derived from Greek and Latin roots for ‘light’.@@ '
@@the Photoluminescence repository was to be copied by a bash script into the GitHub Page repository, whenever I updated the former.@@ _
@@this way, I could make little changes as I @wanted to, without polluting the GitHub Page repository.@@ _

@@the directories was so &organized, <that posts were &collected into a dedicated directory, and pages into another>.@@ _
@@here, posts were standalone articles.@@ _
@@pages, including@@ ++index.html++ @@,@@ @@&displayed linked post titles organized under the same category.@@ '
@@a category was either a date, genre, series, or a tag.@@ '
===

===
%%June 5:%% '

@@ @sketched a Python script playing the role similar to a makefile.@@ _
@@first, it @searched the Porphyrin markup in a directory, and @converted them into HTML.@@ _
@@second, it @combined the head, the header, and the footer with the main text of every post.@@ _
@@third, it @wrote category pages, {which itself @listed other categories}.@@ _

@@a JSON file, {which Python could read with module@@ ++json++ @@},@@ @@was to be curated.@@ _
@@when a category page was being &written, data from the JSON file @helped the program to map the category name to the path to that page.@@ _
@@special consideration was necessary for strings of dates, since they were &supposed to be grouped by month.@@ _
@@for instance, the category “June 2021” was a tag, and the page@@ ++/page/june-2021.html++ @@was to be updated constantly.@@ _
@@to simplify matters, I @mandated <that every post should have a unique date, saved as six digits (two for each of year, month, and day), {from which a function @returned the month and the corresponding path}>.@@ '
===

~~~

===
@@❧@@ %%mostly June 27, 2021%% '
===
